import os
import json
import re
from typing import List
from dotenv import load_dotenv
from huggingface_hub import InferenceClient
from qdrant_client import QdrantClient
from qdrant_client.http import models

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

HF_TOKEN = os.getenv("HUGGINGFACE_API_TOKEN")
HF_MODEL = "sentence-transformers/all-MiniLM-L6-v2"

INPUT_FILE = "src/embedding/data.json"
COLLECTION = "knowledge_collection"
VECTOR_NAME = "embedding"

# === Qdrant –∫–ª–∏–µ–Ω—Ç ===
qdrant_client = QdrantClient(
    url="http://qdrant:6333",
    prefer_grpc=False,
)

# === HuggingFace Inference –∫–ª–∏–µ–Ω—Ç ===
client = InferenceClient(
    model=HF_MODEL,
    token=HF_TOKEN
)

# === –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
def clean_text(text: str) -> str:
    text = re.sub(r"<[^>]+>", "", text)
    text = text.replace("\xa0", " ")
    return text.strip()

# === –≠–º–±–µ–¥–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ HuggingFace Inference API ===
def get_remote_embedding(text: str) -> List[float]:
    return client.feature_extraction(text)

# === –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Qdrant ===
def create_collection():
    sample = get_remote_embedding("–ü—Ä–∏–º–µ—Ä")
    vec_size = len(sample)
    qdrant_client.recreate_collection(
        collection_name=COLLECTION,
        vectors_config={
            VECTOR_NAME: models.VectorParams(
                size=vec_size,
                distance=models.Distance.COSINE
            )
        },
    )

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –≤ Qdrant ===
def upload_to_qdrant(records: List[dict]):
    points = []
    for idx, rec in enumerate(records):
        points.append(
            models.PointStruct(
                id=idx,
                vector={VECTOR_NAME: rec["embedding"]},
                payload={
                    "url": rec.get("url"),
                    "service_name": rec.get("service_name"),
                    "question": rec.get("question"),
                    "answer": rec.get("answer"),
                },
            )
        )
    qdrant_client.upload_points(
        collection_name=COLLECTION,
        points=points,
        wait=True,
    )

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def add_to_db():
    print("üöÄ –°—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Qdrant...")
    
    try:
        create_collection()
        print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        return

    with open(INPUT_FILE, encoding="utf-8") as f:
        records = json.load(f)

    processed = []
    for i, rec in enumerate(records, start=1):
        print(f"{i}/{len(records)}")
        text = f"{rec['question']}\n\n{rec['answer']}"
        text = clean_text(text)
        try:
            rec["embedding"] = get_remote_embedding(text).tolist()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–µ: {e}")
            continue
        processed.append(rec)

        if i % 1000 == 0:
            with open("processed.json", "w", encoding="utf-8") as f:
                json.dump(processed, f, ensure_ascii=False, indent=2)

    print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –≥–æ—Ç–æ–≤—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Qdrant...")
    upload_to_qdrant(processed)

    cnt = qdrant_client.count(collection_name=COLLECTION, exact=True).count
    print(f"üéâ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed)} —Ç–æ—á–µ–∫, –≤—Å–µ–≥–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {cnt}")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    add_to_db()

import os
from dotenv import load_dotenv
from crewai import LLM, Agent, Task, Crew
from pydantic import BaseModel, Field

load_dotenv()

llm = LLM(
    model="groq/llama3-70b-8192",
    api_key=os.getenv("GROQ_TOKEN"),
    api_base="https://api.groq.com/openai/v1",
    temperature=0.7,
)
summaries = {
    "претензия": [
        "Клиент пожаловался на работу службы доставки, оператор извинился и оформил новое отправление.",
        "Обращение касалось качества товара, предложена компенсация.",
    ],
    "инфозапрос": [
        "Клиент уточнил условия возврата, оператор сообщил стандартные правила.",
        "Запрошена информация по тарифам — отправлена подробная таблица.",
    ],
    "успешное завершение": [
        "Клиент выразил благодарность, оператор попрощался и закрыл диалог.",
        "Обсуждение завершилось положительно, проблема решена.",
    ],
}

summary_agent = Agent(
    role="Summary Agent",
    goal=(
        "Собрать воедино результаты Intent, Emotion и Knowledge агентов "
        "и вернуть краткий структурированный отчёт для CRM."
    ),
    backstory=(
        "Ты — виртуальный помощник оператора контакт‑центра, "
        "специализирующийся на создании ёмких конспектов разговоров "
        "и подготовке финального JSON для автозаполнения системы."
    ),
    llm=llm,
)


class SummaryResponse(BaseModel):
    summary: str
    # issue_type: str           # любое строковое значение из Intent Agent
    # client_sentiment: str     # любое строковое значение из Emotion Agent
    # resolution: str           # любое строковое значение из Knowledge Agent


summary_task = Task(
    description=(
        "Ты — агент резюме. На основе информации от Intent, Emotion и Knowledge агентов сформируй краткое, структурированное содержание разговора "
        "для автоматического внесения в CRM. Старайся выделить основное намерение клиента, его эмоциональное состояние и принятое решение.\n\n"
        "Примеры резюме по типам обращения:\n"
        "- Претензия → 'Клиент пожаловался на работу службы доставки, оператор извинился и оформил новое отправление.'\n"
        "- Претензия → 'Обращение касалось качества товара, предложена компенсация.'\n"
        "- Инфозапрос → 'Клиент уточнил условия возврата, оператор сообщил стандартные правила.'\n"
        "- Инфозапрос → 'Запрошена информация по тарифам — отправлена подробная таблица.'\n"
        "- Успешное завершение → 'Клиент выразил благодарность, оператор попрощался и закрыл диалог.'\n"
        "- Успешное завершение → 'Обсуждение завершилось положительно, проблема решена.'\n\n"
        "Дополнительные примеры:\n"
        + "\n".join([f"- {key} → " + " / ".join(val) for key, val in summaries.items()])
    ),
    expected_output='JSON с ключом "summary". Строго в формате JSON без пояснений!',
    agent=summary_agent,
    output_json=SummaryResponse,
    parse_output=lambda x: x if isinstance(x, dict) else {"summary": str(x)},
)
